#!/usr/bin/env python
from __future__ import print_function, division
import numpy as np
import contextlib
import matplotlib.pyplot as plt
from itertools import cycle, islice

@contextlib.contextmanager
def smart_open(filename=None):
    if filename and filename != '-':
        fh = open(filename, 'w')
    else:
        fh = sys.stdout

    try:
        yield fh
    finally:
        if fh is not sys.stdout:
            fh.close()

if __name__ == '__main__':
    import argparse
    import sys

    parser = argparse.ArgumentParser("generate QKD sequences for the AWG")
    parser.add_argument("--sequence", nargs='+', default=None, help="manual sequence")
    parser.add_argument("-o", "--output", default="-", help="output file")
    parser.add_argument("--output-sequence", default="-", help="output sequence file")
    parser.add_argument("-s", "--sample-rate", type=float, default=85.75, help="sample rate in GHz")
    parser.add_argument("-f", "--frequency", type=float, default=6.125, help="pulse repetition rate in GHz")
    parser.add_argument("--samples", type=int, default=255360, help="total number of samples")
    parser.add_argument("-n", "--num-qubits", type=int, default=10, help="number of qubits")
    parser.add_argument("--duty-cycle", type=float, default=0.5, help="fraction of pulse period that is high")
    parser.add_argument("--plot", action='store_true', default=False, help="plot the waveforms")
    parser.add_argument("--time-basis-probability", type=float, default=0.9, help="probability to output a time basis qubit")
    parser.add_argument("--phase-levels", type=int, default=5, help="number of phase randomization levels")
    parser.add_argument("--phase-scale", type=int, default=0.1, help="increase in output for each phase level")
    args = parser.parse_args()

    if args.phase_levels*args.phase_scale > 1:
        print("error: phase_levels*phase_scale > 1", file=sys.stderr)
        sys.exit(1)

    t = np.linspace(0,args.samples/args.sample_rate,args.samples)

    p = [args.time_basis_probability/2]*2 + [1-args.time_basis_probability] + [0.0]

    if args.sequence is not None:
        for qubit in args.sequence:
            if qubit not in ["E","L","P","0"]:
                print("error: don't understand qubit '%s'" % qubit, file=sys.stderr)
                print("must be one of 'E', 'L', 'P', or '0'", file=sys.stderr)
                sys.exit(1)

        sequence = np.array(list(islice(cycle(args.sequence),None,args.num_qubits)),dtype='<U1')
    else:
        sequence = np.random.choice(["E","L","P","0"],size=args.num_qubits,p=p)

    phase_sequence = np.random.choice(np.arange(args.phase_levels),size=args.num_qubits)

    with smart_open(args.output_sequence) as f:
        f.write("".join(sequence) + '\n')

    y1 = np.zeros(args.samples)
    y2 = np.zeros(args.samples)
    y3 = np.zeros(args.samples)
    y4 = np.zeros(args.samples)
    for i in range(len(y1)):
        bit, remainder = np.divmod(t[i],1/args.frequency)
        bit = int(bit)

        if i < 100:
            y1[i] = 1

        if bit >= len(sequence):
            continue

        if remainder > args.duty_cycle/args.frequency:
            continue

        y2[i] = phase_sequence[bit]*args.phase_scale

        if sequence[bit] == 'E':
            y3[i] = 1
            y4[i] = 0
        elif sequence[bit] == 'L':
            y3[i] = 0
            y4[i] = 1
        elif sequence[bit] == 'P':
            y3[i] = 0.5
            y4[i] = 0.5

    with smart_open(args.output) as f:
        f.write("SampleRate = %.3f GHz\n" % args.sample_rate)
        f.write("Y1,Y2,Y3,Y4\n")
        for i in range(len(y1)):
            f.write(",".join(["%.18g" % x for x in [y1[i],y2[i],y3[i],y4[i]]]) + '\n')

    if args.plot:
        fig, axes = plt.subplots(4,1,sharex=True,sharey=True)

        axes[0].plot(t,y1)
        axes[0].set_title('Channel 1 (Clock)')
        axes[1].plot(t,y2)
        axes[1].set_title('Channel 2 (Phase)')
        axes[2].plot(t,y3)
        axes[2].set_title('Channel 3 (Early)')
        axes[3].plot(t,y4)
        axes[3].set_title('Channel 4 (Late)')
        axes[3].set_xlabel("Time (ns)")
        plt.show()
