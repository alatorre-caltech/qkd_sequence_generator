#!/usr/bin/env python
from __future__ import print_function, division
import numpy as np

if __name__ == '__main__':
    import argparse
    import sys

    parser = argparse.ArgumentParser("generate QKD sequences for the AWG")
    parser.add_argument("-o", "--output", default=sys.stdout, help="output file")
    parser.add_argument("-s", type=float, "--sample-rate", default=85.75, help="sample rate in GHz")
    parser.add_argument("-f", type=float, "--frequency", default=6.125, help="pulse repetition rate in GHz")
    parser.add_argument("--samples", type=int, default=256000, help="total number of samples")
    parser.add_argument("-n", "--num-qubits", type=int, default=10, help="number of qubits")
    parser.add_argument("--pulse-width", type=float, default=0.5, help="fraction of pulse period that is high")
    args = parser.parse_args()

    t = np.linspace(0,args.samples/args.sample_rate,args.samples)
    sequence = np.random.choice("ELP0",size=args.num_qubits)
    y1 = np.zeros(args.samples)
    y2 = np.zeros(args.samples)
    y3 = np.zeros(args.samples)
    y4 = np.zeros(args.samples)
    for i in range(len(y1)):
        bit, remainder = np.divmod(t[i],1/args.frequency)
        if sequence[bit] == 'E':
            y1[i] = 1
            y2[i] = 0
        elif sequence[bit] == 'L':
            y1[i] = 0
            y2[i] = 1
        elif sequence[bit] == 'P':
            y1[i] = 0.5
            y2[i] = 0.5

    with open(args.output) as f:
        f.write("SampleRate = %.3f GHz\n" % args.sample_rate)
        f.write("Y1,Y2,Y3,Y4\n")
        for i in range(len(y1)):
            f.write(",".join(["%.18g" % x for x in [y1[i],y2[i],y3[i],y4[i]]]) + '\n')
